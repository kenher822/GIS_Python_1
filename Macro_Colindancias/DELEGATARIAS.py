arcpy.AddField_management(r'C:\SHP\PARCELAS.shp', "NCAT", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(r'C:\SHP\PARCELAS.shp', "NC", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.SelectLayerByAttribute_management("PARCELAS", "NEW_SELECTION", "\"SOLICITUD\" = 'SI'")
arcpy.FeatureToPoint_management("PARCELAS",r'C:\SHP\CENTROIDES.shp',"INSIDE")
arcpy.gp.XToolsPro_AddXYZ("CENTROIDES", "CENTER_POINT", "X", "Y", "", "PROJECT_DATA", "PROJCS['WGS_1984_UTM_Zone_16N',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-87.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]")
arcpy.SpatialJoin_analysis("PARCELAS","CENTROIDES",r'C:\SHP\PARCELAS1.shp', "JOIN_ONE_TO_ONE", "KEEP_COMMON", "PERIMETROS \"PERIMETROS\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS.shp,PERIMETROS,-1,-1;CODENC \"CODENC\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS.shp,CODENC,-1,-1;MAPAPARCEL \"MAPAPARCEL\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS.shp,MAPAPARCEL,-1,-1;BLOQUE \"BLOQUE\" true true false 3 Text 0 0 ,First,#,C:\\SHP\\PARCELAS.shp,BLOQUE,-1,-1;LOTE \"LOTE\" true true false 4 Text 0 0 ,First,#,C:\\SHP\\PARCELAS.shp,LOTE,-1,-1;BARRIO \"BARRIO\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS.shp,BARRIO,-1,-1;MUNICIPIO \"MUNICIPIO\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS.shp,MUNICIPIO,-1,-1;DEPARTAMEN \"DEPARTAMEN\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS.shp,DEPARTAMEN,-1,-1;SOLICITUD \"SOLICITUD\" true true false 2 Text 0 0 ,First,#,C:\\SHP\\PARCELAS.shp,SOLICITUD,-1,-1;COLINDANTE \"COLINDANTE\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS.shp,COLINDANTE,-1,-1;NCAT \"NCAT\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS.shp,NCAT,-1,-1;NC \"NC\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS.shp,NC,-1,-1;X \"X\" true true false 19 Double 0 0 ,First,#,C:\\SHP\\CENTROIDES.shp,X,-1,-1;Y \"Y\" true true false 19 Double 0 0 ,First,#,C:\\SHP\\CENTROIDES.shp,Y,-1,-1", "INTERSECT", "", "")
arcpy.CalculateField_management('PARCELAS1', "NC", "NCP", "VB", "'****Calculo de NC PROGRAMDO POR LIC. EVENOR IBARRA 29/11/2011 SIT-INETER*****\\n'* LONGITUD DE X 6 DIGITOS\\n'* LONGITUD DE Y 7 DIGITOS (SE OMITE EL PRIMER DIGITO DE Y)\\n'Dim NCP As String\\n\\n'***PRIMEROS 12 DIGITOS*****\\nNCP=   mid( [X],1,1) & mid( [Y],2,1) _\\n        &  mid( [X],2,1) & mid( [Y],3,1) _\\n        &  mid( [X],3,1) & mid( [Y],4,1) _\\n        &  mid( [X],4,1) & mid( [Y],5,1) _\\n        &  mid( [X],5,1) & mid( [Y],6,1) _\\n        &  mid( [X],6,1) & mid( [Y],7,1)\\n'***CALCULO DE LOS ULTIMOS DOS DIGITOS*****      \\nNCP=NCP  &  Abs ((mid( [X],1,1) - mid( [Y],2,1)) _\\n                      +  (mid( [X],2,1) - mid( [Y],3,1)) _\\n                      +  (mid( [X],3,1) - mid( [Y],4,1)) _\\n                      +  (mid( [X],4,1) - mid( [Y],5,1)) _\\n                      +  (mid( [X],5,1) - mid( [Y],6,1)) _\\n                      +  (mid( [X],6,1) - mid( [Y],7,1)))+10\\n\\n\\n")
arcpy.CalculateField_management("PARCELAS1", "NCAT", "[NCAT]", "VB", "if  len(trim([MAPAPARCEL]))= 0 then\\n      [NCAT] = [NC] \\nelse\\n     [NCAT] = [MAPAPARCEL] \\nend if\\n")
arcpy.gp.XToolsPro_CalculateArea("PARCELAS1", "AREA", "PROJECT_DATA", "PROJCS['WGS_1984_UTM_Zone_16N',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-87.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]", "squareMeters")
arcpy.SelectLayerByAttribute_management("PARCELAS", "NEW_SELECTION", "\"SOLICITUD\" <> 'SI'")
arcpy.CalculateField_management("PARCELAS", "NCAT", "[NCAT]", "VB", "[NCAT] =\"\"\\nif [COLINDANTE] <> \"\" then\\n    [NCAT] = [COLINDANTE] \\nend if")
arcpy.Merge_management("C:\\SHP\\PARCELAS1.shp;PARCELAS",r'C:\SHP\GIS_PARCELAS.shp', "PERIMETROS \"PERIMETROS\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS1.shp,PERIMETROS,-1,-1,PARCELAS,PERIMETROS,-1,-1;CODENC \"CODENC\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS1.shp,CODENC,-1,-1,PARCELAS,CODENC,-1,-1;MAPAPARCEL \"MAPAPARCEL\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS1.shp,MAPAPARCEL,-1,-1,PARCELAS,MAPAPARCEL,-1,-1;BLOQUE \"BLOQUE\" true true false 3 Text 0 0 ,First,#,C:\\SHP\\PARCELAS1.shp,BLOQUE,-1,-1,PARCELAS,BLOQUE,-1,-1;LOTE \"LOTE\" true true false 4 Text 0 0 ,First,#,C:\\SHP\\PARCELAS1.shp,LOTE,-1,-1,PARCELAS,LOTE,-1,-1;BARRIO \"BARRIO\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS1.shp,BARRIO,-1,-1,PARCELAS,BARRIO,-1,-1;MUNICIPIO \"MUNICIPIO\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS1.shp,MUNICIPIO,-1,-1,PARCELAS,MUNICIPIO,-1,-1;DEPARTAMEN \"DEPARTAMEN\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS1.shp,DEPARTAMEN,-1,-1,PARCELAS,DEPARTAMEN,-1,-1;SOLICITUD \"SOLICITUD\" true true false 2 Text 0 0 ,First,#,C:\\SHP\\PARCELAS1.shp,SOLICITUD,-1,-1,PARCELAS,SOLICITUD,-1,-1;COLINDANTE \"COLINDANTE\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS1.shp,COLINDANTE,-1,-1,PARCELAS,COLINDANTE,-1,-1;NCAT \"NCAT\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS1.shp,NCAT,-1,-1,PARCELAS,NCAT,-1,-1;NC \"NC\" true true false 50 Text 0 0 ,First,#,C:\\SHP\\PARCELAS1.shp,NC,-1,-1,PARCELAS,NC,-1,-1;X \"X\" true true false 19 Double 0 0 ,First,#,C:\\SHP\\PARCELAS1.shp,X,-1,-1;Y \"Y\" true true false 19 Double 0 0 ,First,#,C:\\SHP\\PARCELAS.shp,Y,-1,-1;AREA \"AREA\" true true false 19 Double 0 0 ,First,#,C:\\SHP\\PARCELAS1.shp,AREA,-1,-1")
arcpy.DeleteField_management("GIS_PARCELAS",["Join_Count","TARGET_FID"])
arcpy.SelectLayerByAttribute_management("GIS_PARCELAS", "NEW_SELECTION", "\"SOLICITUD\" = 'SI'")
arcpy.Merge_management("GIS_PARCELAS",r'C:\SHP\BASE_GRAFICA', "PERIMETROS \"PERIMETROS\" true true false 50 Text 0 0 ,First,#,GIS_PARCELAS,PERIMETROS,-1,-1;CODENC \"CODENC\" true true false 50 Text 0 0 ,First,#,GIS_PARCELAS,CODENC,-1,-1;MAPAPARCEL \"MAPAPARCEL\" true true false 50 Text 0 0 ,First,#,GIS_PARCELAS,MAPAPARCEL,-1,-1;BLOQUE \"BLOQUE\" true true false 3 Text 0 0 ,First,#,GIS_PARCELAS,BLOQUE,-1,-1;LOTE \"LOTE\" true true false 4 Text 0 0 ,First,#,GIS_PARCELAS,LOTE,-1,-1;BARRIO \"BARRIO\" true true false 50 Text 0 0 ,First,#,GIS_PARCELAS,BARRIO,-1,-1;MUNICIPIO \"MUNICIPIO\" true true false 50 Text 0 0 ,First,#,GIS_PARCELAS,MUNICIPIO,-1,-1;DEPARTAMEN \"DEPARTAMEN\" true true false 50 Text 0 0 ,First,#,GIS_PARCELAS,DEPARTAMEN,-1,-1;SOLICITUD \"SOLICITUD\" true true false 2 Text 0 0 ,First,#,GIS_PARCELAS,SOLICITUD,-1,-1;COLINDANTE \"COLINDANTE\" true true false 50 Text 0 0 ,First,#,GIS_PARCELAS,COLINDANTE,-1,-1;NCAT \"NCAT\" true true false 50 Text 0 0 ,First,#,GIS_PARCELAS,NCAT,-1,-1;NC \"NC\" true true false 50 Text 0 0 ,First,#,GIS_PARCELAS,NC,-1,-1;X \"X\" true true false 19 Double 0 0 ,First,#,GIS_PARCELAS,X,-1,-1;Y \"Y\" true true false 19 Double 0 0 ,First,#,GIS_PARCELAS,Y,-1,-1;AREA \"AREA\" true true false 19 Double 0 0 ,First,#,GIS_PARCELAS,AREA,-1,-1")
arcpy.gp.XToolsGP_Export2Excel("BASE_GRAFICA",["DEPARTAMEN","MUNICIPIO","BARRIO","PERIMETROS","CODENC","MAPAPARCEL","X","Y","NCAT","AREA"],r'C:\SHP\EXCEL\CONSTANCIAS.xlsx', "false")
arcpy.ImportToolbox("C:/Program Files/ET SpatialTechniques/ET GeoWizards 10.2 for ArcGIS 10.1/ET GeoWizards.tbx")
arcpy.gp.ET_GPCogoInverse(r'C:\SHP\BASE_GRAFICA.shp',r'C:\SHP\DERROTEROS\DERROTEROS.shp', "QuadrantBearing", "DMS", "", "", "", "")
arcpy.gp.ET_GPRenode("DERROTEROS",r'C:\SHP\DERROTEROS\NODOS.shp')
arcpy.DeleteField_management(r'C:\SHP\DERROTEROS\DERROTEROS.shp',["ArcLength","Delta","ET_ID","Id","Radius","Side","Tangent"])
arcpy.AddField_management(r'C:\SHP\DERROTEROS\DERROTEROS.shp', "CARDINAL1", "TEXT", "", "", "5", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(r'C:\SHP\DERROTEROS\DERROTEROS.shp', "GRADOS", "TEXT", "", "", "5", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(r'C:\SHP\DERROTEROS\DERROTEROS.shp', "MINUTOS", "TEXT", "", "", "5", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(r'C:\SHP\DERROTEROS\DERROTEROS.shp', "SEGUNDOS", "TEXT", "", "", "5", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(r'C:\SHP\DERROTEROS\DERROTEROS.shp', "CARDINAL2", "TEXT", "", "", "5", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.CalculateField_management(r'C:\SHP\DERROTEROS\DERROTEROS.shp', "CARDINAL1", "Cardinal1Var", "VB", "Cardinal1Var = Left( [Direction] , 1) \\nif (Cardinal1Var=\"N\") then\\n     Cardinal1Var=\"NORTE\"\\nelse\\n     Cardinal1Var=\"SUR\"\\nend if\\n\\n")
arcpy.CalculateField_management(r'C:\SHP\DERROTEROS\DERROTEROS.shp', "GRADOS", "GradoVar  ", "VB", "Cardinal1 = Left([Direction], 1)\\nCardinal2 = Right([Direction], 1)\\nContGuion = 0\\nMid1 = 0\\nNid2 = 0\\nDireccionVar = Trim(Mid( [Direction] , 2, Len([Direction]) - 2))\\nFor i = 1 To Len(DireccionVar)\\n    If Mid(DireccionVar, i, 1) = \"-\" Then\\n        ContGuion = ContGuion + 1\\n        If ContGuion = 1 Then\\n            Mid1 = i\\n            GradoVar  = Trim(Mid(DireccionVar, 1, Mid1 - 1))\\n        ElseIf ContGuion = 2 Then\\n            Mid2 = i\\n            Minutos = Trim(Mid(DireccionVar, Mid1 + 1, (Mid2 - Mid1) - 1))\\n            Segundos = Trim(Mid(DireccionVar, Mid2 + 1, Len(DireccionVar) - Mid2))\\n        End If\\n   End If\\nNext\\n\\n\\n")
arcpy.CalculateField_management(r'C:\SHP\DERROTEROS\DERROTEROS.shp', "MINUTOS", " MinutosVar", "VB", "Cardinal1 = Left([Direction], 1)\\nCardinal2 = Right([Direction], 1)\\nContGuion = 0\\nMid1 = 0\\nNid2 = 0\\nDireccionVar = Trim(Mid( [Direction] , 2, Len([Direction]) - 2))\\nFor i = 1 To Len(DireccionVar)\\n    If Mid(DireccionVar, i, 1) = \"-\" Then\\n        ContGuion = ContGuion + 1\\n        If ContGuion = 1 Then\\n            Mid1 = i\\n            GradoVar  = Trim(Mid(DireccionVar, 1, Mid1 - 1))\\n        ElseIf ContGuion = 2 Then\\n            Mid2 = i\\n            MinutosVar = Trim(Mid(DireccionVar, Mid1 + 1, (Mid2 - Mid1) - 1))\\n            SegundosVar = Trim(Mid(DireccionVar, Mid2 + 1, Len(DireccionVar) - Mid2))\\n        End If\\n   End If\\nNext\\n\\n\\n\\n")
arcpy.CalculateField_management(r'C:\SHP\DERROTEROS\DERROTEROS.shp', "SEGUNDOS", "SegundosVar", "VB", "Cardinal1 = Left([Direction], 1)\\nCardinal2 = Right([Direction], 1)\\nContGuion = 0\\nMid1 = 0\\nNid2 = 0\\nDireccionVar = Trim(Mid( [Direction] , 2, Len([Direction]) - 2))\\nFor i = 1 To Len(DireccionVar)\\n    If Mid(DireccionVar, i, 1) = \"-\" Then\\n        ContGuion = ContGuion + 1\\n        If ContGuion = 1 Then\\n            Mid1 = i\\n            GradoVar  = Trim(Mid(DireccionVar, 1, Mid1 - 1))\\n        ElseIf ContGuion = 2 Then\\n            Mid2 = i\\n            MinutosVar = Trim(Mid(DireccionVar, Mid1 + 1, (Mid2 - Mid1) - 1))\\n            SegundosVar = Trim(Mid(DireccionVar, Mid2 + 1, Len(DireccionVar) - Mid2))\\n        End If\\n   End If\\nNext\\n\\n\\n\\n")
arcpy.CalculateField_management(r'C:\SHP\DERROTEROS\DERROTEROS.shp', "CARDINAL2", "Cardinal2Var", "VB", "Cardinal2Var = Right( [Direction] , 1) \\nif (Cardinal2Var=\"E\") then\\n     Cardinal2Var=\"ESTE\"\\nelse\\n     Cardinal2Var=\"OESTE\"\\nend if\\n\\n\\n")
arcpy.gp.XToolsGP_Export2Excel(r'C:\SHP\DERROTEROS\DERROTEROS.shp',["DEPARTAMEN","MUNICIPIO","BARRIO","CODENC","PERIMETROS","NCAT","BLOQUE","LOTE","AREA","ET_FNode","ET_TNode","CARDINAL1","GRADOS","MINUTOS","SEGUNDOS","CARDINAL2","Distance"],r'C:\SHP\EXCEL\DERROTEROS.xlsx', "false")
arcpy.gp.ET_GPFeaturesToEnvelopes('PARCELAS1',r'C:\SHP\COLINDANTES\CUADROS.shp')
arcpy.SplitLine_management("CUADROS",r'C:\SHP\COLINDANTES\LINEAS_CUADROS.shp')
arcpy.gp.ET_GPCogoInverse("LINEAS_CUADROS",r'C:\SHP\COLINDANTES\DIRECCION_CUADROS.shp', "QuadrantBearing", "DMS", "", "", "", "")
arcpy.SplitLine_management(r'C:\SHP\GIS_PARCELAS.shp',r'C:\SHP\COLINDANTES\LINE_PARCELAS.shp')
arcpy.gp.XToolsPro_SplitPolylines("LINE_PARCELAS",r'C:\SHP\COLINDANTES\SEGMENTOS_PARCELAS.shp', "Split polylines into equal segments", "", "3", "", "false", "", "false", "")
arcpy.FeatureVerticesToPoints_management("SEGMENTOS_PARCELAS",r'C:\SHP\COLINDANTES\PUNTOS_PARCELAS.shp', "MID")
arcpy.CalculateField_management("DIRECCION_CUADROS", "Direction", "Replace( [Direction], \"N 90-0-0.00 E\", \"NORTE\")", "VB", "")
arcpy.CalculateField_management("DIRECCION_CUADROS", "Direction", "Replace( [Direction], \"S 0-0-0.00 W\", \"ESTE\")", "VB", "")
arcpy.CalculateField_management("DIRECCION_CUADROS", "Direction", "Replace( [Direction], \"N 0-0-0.00 E\", \"OESTE\")", "VB", "")
arcpy.CalculateField_management("DIRECCION_CUADROS", "Direction", "Replace( [Direction], \"S 90-0-0.00 W\", \"SUR\")", "VB", "")
arcpy.gp.XToolsPro_SplitPolylines("DIRECCION_CUADROS",r'C:\SHP\COLINDANTES\SEG_CUADROS.shp',"Split polylines into equal segments", "", "10", "", "false", "", "false", "")
arcpy.FeatureVerticesToPoints_management(r'C:\SHP\COLINDANTES\SEG_CUADROS.shp',r'C:\SHP\COLINDANTES\PTOS_CUADROS.shp', "MID")
arcpy.gp.ET_GPSpiderLink("PTOS_CUADROS","NCAT","PUNTOS_PARCELAS", "NCAT",r'C:\SHP\COLINDANTES\SPIDER1.shp', "true", "", "")
arcpy.Intersect_analysis(['SPIDER1',r'C:\SHP\COLINDANTES\PUNTOS_PARCELAS.shp'],r'C:\SHP\COLINDANTES\INTERSECT1.shp',"ALL","","INPUT")
arcpy.SelectLayerByAttribute_management("INTERSECT1", "NEW_SELECTION", "\"SOLICITUD\" = 'SI'")
arcpy.SelectLayerByAttribute_management("INTERSECT1", "REMOVE_FROM_SELECTION", "\"NCAT\" = \"NCAT_1\"")
arcpy.FeatureClassToShapefile_conversion("INTERSECT1", r'C:\SHP\COLINDANTES')
arcpy.AddField_management(r'C:\SHP\COLINDANTES\INTERSECT1_1.shp', "CONCATENAR", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.CalculateField_management(r'C:\SHP\COLINDANTES\INTERSECT1_1.shp', "CONCATENAR", "[NCAT] + [Direction] + [NCAT_1]", "VB", "")
arcpy.gp.XToolsPro_FindDuplicates(r'C:\SHP\COLINDANTES\INTERSECT1_1.shp', "CONCATENAR",r'C:\SHP\COLINDANTES\COLINDANCIAS.shp', "True", "True", "Index", "0, 1 (0 - distincts, 1 - others)", "")
arcpy.AddField_management(r'C:\SHP\COLINDANTES\COLINDANCIAS.shp', "NORTE", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(r'C:\SHP\COLINDANTES\COLINDANCIAS.shp', "ESTE", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(r'C:\SHP\COLINDANTES\COLINDANCIAS.shp', "OESTE", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(r'C:\SHP\COLINDANTES\COLINDANCIAS.shp', "SUR", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.CalculateField_management("COLINDANCIAS","NORTE","N","VB", "N=\"\"\\nif [Direction]=\"NORTE\" then\\n      N= [NCAT_1] \\nend if\\n\\n\\n\\n")
arcpy.CalculateField_management("COLINDANCIAS","ESTE", "E", "VB", "E=\"\"\\nif [Direction]=\"ESTE\" then\\n      E= [NCAT_1] \\nend if\\n\\n\\n\\n")
arcpy.CalculateField_management("COLINDANCIAS", "OESTE", "O", "VB", "O=\"\"\\nif [Direction]=\"OESTE\" then\\n      O= [NCAT_1] \\nend if\\n\\n\\n\\n")
arcpy.CalculateField_management("COLINDANCIAS", "SUR", "S", "VB", "S=\"\"\\nif [Direction]=\"SUR\" then\\n      S= [NCAT_1] \\nend if\\n\\n\\n\\n")
arcpy.gp.XToolsGP_Export2Excel("COLINDANCIAS",["DEPARTAMEN","MUNICIPIO","BARRIO","PERIMETROS","CODENC","NCAT","AREA","NORTE","ESTE","OESTE","SUR"],r'C:\SHP\EXCEL\COLINDANCIAS.xlsx', "false")
arcpy.Project_management(r'C:\SHP\BASE_GRAFICA.shp',r'C:\SHP\COLINDANTES\KMZ.shp', "PROJCS['WGS_1984_UTM_Zone_16N',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-87.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]", "", "PROJCS['WGS_1984_UTM_Zone_16N',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-87.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]")
arcpy.LayerToKML_conversion("KMZ",r'C:\SHP\EXCEL\BASE GRAFICA.kmz', "1", "false", "DEFAULT", "1024", "96", "CLAMPED_TO_GROUND")


